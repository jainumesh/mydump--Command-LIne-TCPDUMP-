Programing Language C
Library used: LIBPCAP 
To run a file use command:
	Server mode:  pbproxy [-l localport] [-k Key] <Destination> <Destination_port>
	Client mode:  pbproxy [-k Key] <Destination> <Destination_port>
	

Files Submitted:
1)pbproxy.c- source file
2)makefile
3)README: This file.

Design: USing the API's provided by openSSl and Socket  libraries,we are trying to create a proxy program which can work as forward as well as reverse proxy.
		As required in question forward proxy(server side) is identified based on -l localport option
		and Client side proxy is identified by the lack of the -l option.
		Server side proxy listens on the port number specified by user and forwards all the traffic it receives on localport to the destination IP and port but after DECRYPTING it.
		Similarly, Client side proxy reads STDIN(cmd line) encrypts the input and sends to the destination specified as Arguments
		(this destination should be the IP and port of the server side proxy)
		Both the proxies use AES_ctr128_encrypt API to encrypt/decrypt data. AES_ctr128_encrypt is a 128 bit Counter based encryption API provided by openssl.
		The IV is generated by the API (RAND_bytes) by the client adn the same is communicated to the server proxy as the 1st 8 bytes of the 1st packet.
		The server reads the 1st packet, extracts the 1st 8 bytes and uses them as IV.
		All following communication uses the same IV on both sides until the socket connection is terminated by either parties.
		Also the Server Proxy can handle multiple clients but not concurrently. A timeout of 5 seconds is used to identify lost connections.This value can be configured as needed.
		
Sample Commands to run the program.

Client Side: pbproxy -k 1234567899876543 localhost 2222
Server Side: pbproxy -l 2223 -k 1234567899876543 localhost 2222

Note about above: all the Destinations are specified as localhost to do ssh to same machine.The localhost part can be replaced with the Address of the remote machine (server proxy as well as remote machine)

		

